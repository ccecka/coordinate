#pragma once

#include <array>
#include <initializer_list>
#include <type_traits>
#include <__small_vector_facade>

namespace std
{


// T is any type with operators +, +=, -, -=, *, *=,  /, /=, <
template<class T, size_t Rank>
class point : public __small_vector_facade<point<T,Rank>, T, Rank>
{
  using super_t = __small_vector_facade<point<T,Rank>, T, Rank>;

  public:
    using super_t::super_t;
};


template<class T1, size_t Rank, class T2>
struct common_type<point<T1,Rank>,point<T2,Rank>>
{
  using type = point<typename common_type<T1,T2>::type, Rank>;
};


template<class T1, class T2, size_t Rank>
typename enable_if<
  __has_operator_multiplies<T1,T2>::value,
  point<typename common_type<T1,T2>::type, Rank>
>::type
  operator*(T1 val, const point<T2,Rank>& p)
{
  using result_type = point<common_type_t<T1,T2>, Rank>;

  return result_type(val) * p;
}


template<size_t I, class Tuple>
struct tuple_element;


template<size_t I, class T, size_t Rank>
struct tuple_element<I,point<T,Rank>>
{
  static_assert(I < Rank, "I must be less than Rank.");
  using type = T;
};


using int1  = point<int,1>;
using int2  = point<int,2>;
using int3  = point<int,3>;
using int4  = point<int,4>;
using int5  = point<int,5>;
using int6  = point<int,6>;
using int7  = point<int,7>;
using int8  = point<int,8>;
using int9  = point<int,9>;
using int10 = point<int,10>;


using size1  = point<size_t,1>;
using size2  = point<size_t,2>;
using size3  = point<size_t,3>;
using size4  = point<size_t,4>;
using size5  = point<size_t,5>;
using size6  = point<size_t,6>;
using size7  = point<size_t,7>;
using size8  = point<size_t,8>;
using size9  = point<size_t,9>;
using size10 = point<size_t,10>;


using float1  = point<float,1>;
using float2  = point<float,2>;
using float3  = point<float,3>;
using float4  = point<float,4>;
using float5  = point<float,5>;
using float6  = point<float,6>;
using float7  = point<float,7>;
using float8  = point<float,8>;
using float9  = point<float,9>;
using float10 = point<float,10>;


using double1  = point<double,1>;
using double2  = point<double,2>;
using double3  = point<double,3>;
using double4  = point<double,4>;
using double5  = point<double,5>;
using double6  = point<double,6>;
using double7  = point<double,7>;
using double8  = point<double,8>;
using double9  = point<double,9>;
using double10 = point<double,10>;


// T is any type with operators +, +=, -, -=, *, *=,  /, /=, <
template<class T>
class __axis_aligned_box
  : public __small_vector_facade<__axis_aligned_box<T>,T,2>
{
  using super_t = __small_vector_facade<__axis_aligned_box<T>,T,2>;

  public:
    using point_type = T;

    using super_t::super_t;

    const point_type& min() const
    {
      return (*this)[0];
    }

    const point_type& max() const
    {
      return (*this)[1];
    }

    const point_type& extent() const
    {
      return max() - min();
    }

    bool empty() const
    {
      return min() == max();
    }

    bool contains(const point_type& x) const
    {
      bool result = true;

      for(size_t dim = 0; dim != super_t::rank; ++dim)
      {
        result = result && min()[dim] <= result;
        result = result && result < max()[dim];
      }

      return result;
    }
};


template<class T1, class T2>
struct common_type<__axis_aligned_box<T1>,__axis_aligned_box<T2>>
{
  using type = __axis_aligned_box<common_type_t<T1,T2>>;
};


template<class Range>
typename Range::value_type __product(const Range& rng, typename Range::value_type init = typename Range::value_type{1})
{
  for(auto x : rng)
  {
    init *= x;
  }

  return init;
}


// T is any type with operators +, +=, -, -=, *, *=,  /, /=, <
// note regular_grid itself has these operators
template<class T, size_t Rank>
class regular_grid
{
  using super_t = __small_vector_facade<regular_grid<T,Rank>, T, Rank>;

  public:
    using index_type = point<size_t,Rank>;
    using typename super_t::value_type;
    using typename super_t::size_type;
    using reference       = value_type;
    using const_reference = reference;

    using super_t::super_t;

    const value_type& min() const
    {
      return box_.min();
    }

    const value_type& max() const
    {
      return box_.max();
    }

    const value_type& extent() const
    {
      return box_.extent();
    }

    bool contains(const value_type& p) const
    {
      return box_.contains(p);
    }

    size_type size() const
    {
      return __product(extent());
    }

    const_reference operator[](const index_type& idx) const
    {
      return min() + idx;
    }

  private:
    __axis_aligned_box<index_type> box_;
};


}

